import org.apache.avro.Schema;
import org.apache.avro.SchemaBuilder;
import org.apache.avro.SchemaCompatibility;
import org.apache.avro.SchemaCompatibility.SchemaCompatibilityType;

public class AvroCompatibilityExample {
    public static void main(String[] args) {
        String oldSchemaString = "{\"type\":\"record\",\"name\":\"User\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"}]}";
        String newSchemaString = "{\"type\":\"record\",\"name\":\"User\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"age\",\"type\":\"int\"}]}";

        Schema oldSchema = new Schema.Parser().parse(oldSchemaString);
        Schema newSchema = new Schema.Parser().parse(newSchemaString);

        SchemaCompatibilityType compatibilityType = SchemaCompatibility.checkReaderWriterCompatibility(oldSchema, newSchema).getType();

        if (compatibilityType == SchemaCompatibilityType.COMPATIBLE) {
            System.out.println("Schemas are compatible. No intermediate schema needed.");
        } else {
            Schema intermediateSchema = SchemaBuilder.builder().record("IntermediateSchema")
                    .fields().requiredString("name").endRecord();
            String intermediateSchemaString = intermediateSchema.toString();
            System.out.println("Intermediate Schema: " + intermediateSchemaString);
        }
    }
}
